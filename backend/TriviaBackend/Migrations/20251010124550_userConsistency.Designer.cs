// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TriviaBackend.Data;

#nullable disable

namespace TriviaBackend.Migrations
{
    [DbContext(typeof(TriviaDbContext))]
    [Migration("20251010124550_userConsistency")]
    partial class userConsistency
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TriviaBackend.Models.Entities.BaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("user_type")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("user_type").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TriviaBackend.Models.Entities.TriviaQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("integer");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Answer1 = "Paris",
                            Answer2 = "Tokyo",
                            Answer3 = "Shanghai",
                            Answer4 = "Gelgaudiškis",
                            Category = 3,
                            CorrectAnswerIndex = 1,
                            Difficulty = 1,
                            QuestionText = "What is the most populated city?",
                            TimeLimit = 20
                        },
                        new
                        {
                            Id = 200,
                            Answer1 = "pi",
                            Answer2 = "e",
                            Answer3 = "golden ratio",
                            Answer4 = "square root of 2",
                            Category = 3,
                            CorrectAnswerIndex = 3,
                            Difficulty = 2,
                            QuestionText = "which is least",
                            TimeLimit = 30
                        });
                });

            modelBuilder.Entity("TriviaBackend.Models.Entities.Admin", b =>
                {
                    b.HasBaseType("TriviaBackend.Models.Entities.BaseUser");

                    b.Property<bool>("CanEditTrivias")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanKickUsers")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("TriviaBackend.Models.Entities.Player", b =>
                {
                    b.HasBaseType("TriviaBackend.Models.Entities.BaseUser");

                    b.Property<int>("Elo")
                        .HasColumnType("integer");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
